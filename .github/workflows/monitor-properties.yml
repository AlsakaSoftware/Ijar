name: Monitor Properties

on:
  schedule:
    # Run at 8am, 12pm, and 5pm GMT every day
    - cron: '0 8 * * *'
    - cron: '0 12 * * *'
    - cron: '0 17 * * *'
  
  # Allow manual trigger
  workflow_dispatch:
  
  # Webhook trigger for when user creates first query
  repository_dispatch:
    types: [user-first-query, manual-test-trigger]

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Debug secrets availability
      run: |
        echo "üîç Checking which secrets are available..."
        echo "SUPABASE_URL exists: ${{ secrets.SUPABASE_URL != '' }}"
        echo "SUPABASE_SERVICE_ROLE_KEY exists: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY != '' }}"
        echo "APN_AUTH_KEY exists: ${{ secrets.APN_AUTH_KEY != '' }}"
        echo "APN_KEY_ID exists: ${{ secrets.APN_KEY_ID != '' }}"
        echo "APN_TEAM_ID exists: ${{ secrets.APN_TEAM_ID != '' }}"
        echo "APN_BUNDLE_ID exists: ${{ secrets.APN_BUNDLE_ID != '' }}"

    - name: Validate environment secrets
      working-directory: ./backend
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        APN_AUTH_KEY: ${{ secrets.APN_AUTH_KEY }}
        APN_KEY_ID: ${{ secrets.APN_KEY_ID }}
        APN_TEAM_ID: ${{ secrets.APN_TEAM_ID }}
        APN_BUNDLE_ID: ${{ secrets.APN_BUNDLE_ID }}
      run: |
        echo "üîç Validating environment variables..."
        
        # Check required Supabase secrets
        if [ -z "$SUPABASE_URL" ]; then
          echo "‚ùå SUPABASE_URL is missing"
          exit 1
        else
          echo "‚úÖ SUPABASE_URL is set"
        fi
        
        if [ -z "$SUPABASE_SERVICE_ROLE_KEY" ]; then
          echo "‚ùå SUPABASE_SERVICE_ROLE_KEY is missing"
          exit 1
        else
          echo "‚úÖ SUPABASE_SERVICE_ROLE_KEY is set"
        fi
        
        # Check APNs secrets for push notifications
        echo ""
        echo "üì± Checking push notification secrets..."
        
        if [ -z "$APN_AUTH_KEY" ]; then
          echo "‚ö†Ô∏è APN_AUTH_KEY is missing - push notifications will be disabled"
        else
          echo "‚úÖ APN_AUTH_KEY is set"
        fi
        
        if [ -z "$APN_KEY_ID" ]; then
          echo "‚ö†Ô∏è APN_KEY_ID is missing - push notifications will be disabled"
        else
          echo "‚úÖ APN_KEY_ID is set ($APN_KEY_ID)"
        fi
        
        if [ -z "$APN_TEAM_ID" ]; then
          echo "‚ö†Ô∏è APN_TEAM_ID is missing - push notifications will be disabled"
        else
          echo "‚úÖ APN_TEAM_ID is set ($APN_TEAM_ID)"
        fi
        
        if [ -z "$APN_BUNDLE_ID" ]; then
          echo "‚ö†Ô∏è APN_BUNDLE_ID is missing - push notifications will be disabled"
        else
          echo "‚úÖ APN_BUNDLE_ID is set ($APN_BUNDLE_ID)"
        fi
        
        echo ""
        if [ -n "$APN_AUTH_KEY" ] && [ -n "$APN_KEY_ID" ] && [ -n "$APN_TEAM_ID" ] && [ -n "$APN_BUNDLE_ID" ]; then
          echo "üéâ All push notification secrets are configured!"
        else
          echo "‚ö†Ô∏è Some push notification secrets are missing - notifications will be disabled"
        fi
    
    - name: Run property monitor
      working-directory: ./backend
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        APN_AUTH_KEY: ${{ secrets.APN_AUTH_KEY }}
        APN_KEY_ID: ${{ secrets.APN_KEY_ID }}
        APN_TEAM_ID: ${{ secrets.APN_TEAM_ID }}
        APN_BUNDLE_ID: ${{ secrets.APN_BUNDLE_ID }}
      run: npm run monitor